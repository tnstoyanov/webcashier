@model WebCashier.Models.PaymentModel

@{
    ViewData["Title"] = "Top Up Your Account";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="payment-container">
    <div class="payment-header">
        <div class="logo-container">
            <h2 class="logo">zenstox</h2>
            <a href="/" class="back-link">Back to platform</a>
        </div>
    </div>

    <div class="payment-content">
        <h1 class="payment-title">TOP UP YOUR ACCOUNT</h1>
        <p class="security-text">All payments are 100% secure</p>

        <div class="payment-layout">
            <form asp-action="ProcessPayment" method="post" class="payment-form">
                @Html.AntiForgeryToken()
                
                <div class="payment-methods">
                    <p class="method-label">Choose a payment method:</p>
                    <div class="method-carousel">
                        <input type="radio" id="card" name="PaymentMethod" value="card" checked />
                        <label for="card" class="method-option active">
                            <div class="card-icon">
                                <svg width="48" height="32" viewBox="0 0 48 32" fill="none" xmlns="http://www.w3.org/2000/svg">
                                    <rect width="48" height="32" rx="4" fill="#4F46E5"/>
                                    <rect x="4" y="6" width="40" height="4" fill="#E5E7EB"/>
                                    <rect x="4" y="14" width="12" height="2" fill="#D1D5DB"/>
                                    <rect x="4" y="18" width="8" height="2" fill="#D1D5DB"/>
                                    <circle cx="38" cy="22" r="4" fill="#10B981"/>
                                    <circle cx="34" cy="22" r="4" fill="#F59E0B"/>
                                </svg>
                            </div>
                            <span class="payment-brand">Praxis CC 1.3</span>
                        </label>

                        <input type="radio" id="paypal" name="PaymentMethod" value="paypal" />
                        <label for="paypal" class="method-option">
                            <span class="payment-brand">PayPal</span>
                        </label>

                        <input type="radio" id="safetypay" name="PaymentMethod" value="safetypay" />
                        <label for="safetypay" class="method-option">
                            <span class="payment-brand">SafetyPay</span>
                        </label>

                        <input type="radio" id="skrill" name="PaymentMethod" value="skrill" />
                        <label for="skrill" class="method-option">
                            <span class="payment-brand">Skrill</span>
                        </label>

                        <input type="radio" id="zmg" name="PaymentMethod" value="zmg" />
                        <label for="zmg" class="method-option">
                            <span class="payment-brand">ZMG</span>
                        </label>

                        <input type="radio" id="gpay" name="PaymentMethod" value="gpay" />
                        <label for="gpay" class="method-option">
                            <span class="payment-brand">G Pay</span>
                        </label>
                    </div>
                </div>

                <div class="payment-forms">
                    <div id="card-details" class="card-details">
                        <div class="card-form-layout">
                            <div class="form-left">
                                <!-- Amount suggestion buttons -->
                                <div class="amount-suggestions">
                                    <button type="button" class="amount-btn" data-amount="50">€50</button>
                                    <button type="button" class="amount-btn" data-amount="100">€100</button>
                                    <button type="button" class="amount-btn" data-amount="200">€200</button>
                                </div>

                                <div class="form-row">
                                    <div class="form-group amount-group">
                                        <label asp-for="Amount">Amount</label>
                                        <input asp-for="Amount" type="number" step="0.01" class="form-control" placeholder="0" />
                                        <span asp-validation-for="Amount" class="text-danger"></span>
                                    </div>
                                    <div class="form-group currency-group">
                                        <label asp-for="Currency">Currency</label>
                                        <select asp-for="Currency" class="form-control">
                                            <option value="USD">USD</option>
                                            <option value="EUR">EUR</option>
                                            <option value="GBP">GBP</option>
                                        </select>
                                    </div>
                                </div>

                                <div class="form-group">
                                    <label asp-for="NameOnCard">Name on card</label>
                                    <input asp-for="NameOnCard" class="form-control" placeholder="Enter your name" />
                                    <span asp-validation-for="NameOnCard" class="text-danger"></span>
                                </div>

                                <div class="form-group">
                                    <label asp-for="CardNumber">Card number</label>
                                    <input asp-for="CardNumber" class="form-control" placeholder="•••• •••• •••• ••••" maxlength="19" />
                                    <span asp-validation-for="CardNumber" class="text-danger"></span>
                                </div>

                                <div class="form-row">
                                    <div class="form-group">
                                        <label asp-for="ExpirationDate">Expiration Date</label>
                                        <input asp-for="ExpirationDate" class="form-control" placeholder="MM/YY" maxlength="5" />
                                        <span asp-validation-for="ExpirationDate" class="text-danger"></span>
                                    </div>
                                    <div class="form-group">
                                        <label asp-for="CVV">CVV</label>
                                        <input asp-for="CVV" class="form-control" placeholder="123" maxlength="4" />
                                        <span asp-validation-for="CVV" class="text-danger"></span>
                                    </div>
                                </div>

                                <div class="form-group">
                                    <label asp-for="PromotionCode">Promotion code</label>
                                    <input asp-for="PromotionCode" class="form-control" placeholder="Enter code (optional)" />
                                </div>
                            </div>

                            <div class="form-right">
                                <div class="interactive-credit-card">
                                    <div class="card-background">
                                        <div class="card-chip"></div>
                                        <div class="card-number" id="card-display">•••• •••• •••• ••••</div>
                                        <div class="card-details">
                                            <div class="card-holder">
                                                <div class="card-label">CARDHOLDER NAME</div>
                                                <div class="card-name" id="name-display">YOUR NAME HERE</div>
                                            </div>
                                            <div class="card-expiry-section">
                                                <div class="card-label">EXPIRES</div>
                                                <div class="card-expiry" id="expiry-display">MM/YY</div>
                                            </div>
                                            <div class="card-cvc-section">
                                                <div class="card-label">CVC</div>
                                                <div class="card-cvc" id="cvc-display">•••</div>
                                            </div>
                                        </div>
                                        <div class="card-brand" id="card-brand"></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <p class="currency-note">Please note that you might be charged in a different currency</p>

                <button type="submit" class="deposit-btn">DEPOSIT</button>
            </form>
        </div>
    </div>
</div>

<!-- Loading Overlay -->
<div id="loading-overlay" class="loading-overlay" style="display: none;">
    <div class="loading-content">
        <div class="loading-spinner">
            <div class="spinner"></div>
        </div>
        <h3 class="loading-title">Transaction in progress</h3>
        <p class="loading-message">Please wait while we process your payment...</p>
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script>
        // Add missing jQuery Validate creditcard method
        if (typeof $.validator !== 'undefined') {
            $.validator.addMethod("creditcard", function(value, element) {
                // Remove spaces and non-numeric characters
                value = value.replace(/\s/g, '').replace(/[^0-9]/g, '');
                
                // Check if empty
                if (!value) return false;
                
                // Basic length check
                if (value.length < 13 || value.length > 19) return false;
                
                // Luhn algorithm for credit card validation
                var sum = 0;
                var shouldDouble = false;
                
                for (var i = value.length - 1; i >= 0; i--) {
                    var digit = parseInt(value.charAt(i));
                    
                    if (shouldDouble) {
                        digit *= 2;
                        if (digit > 9) digit -= 9;
                    }
                    
                    sum += digit;
                    shouldDouble = !shouldDouble;
                }
                
                return (sum % 10) === 0;
            }, "Please enter a valid credit card number");
        }

        // Card widget elements
        const cardDisplay = document.getElementById('card-display');
        const nameDisplay = document.getElementById('name-display');
        const expiryDisplay = document.getElementById('expiry-display');
        const cvcDisplay = document.getElementById('cvc-display');
        const cardBrand = document.getElementById('card-brand');
        const cardBackground = document.querySelector('.card-background');

        // Format card number input and update widget
        document.querySelector('[name="CardNumber"]').addEventListener('input', function(e) {
            let value = e.target.value.replace(/\s/g, '').replace(/[^0-9]/gi, '');
            let formattedValue = value.match(/.{1,4}/g)?.join(' ') || value;
            e.target.value = formattedValue;
            
            // Update card display - only show user input
            if (value.length > 0) {
                // Create display value with proper spacing
                let displayValue = '';
                for (let i = 0; i < 16; i++) {
                    if (i < value.length) {
                        displayValue += value[i];
                    } else {
                        displayValue += '•';
                    }
                    // Add space after every 4 digits except the last group
                    if ((i + 1) % 4 === 0 && i < 15) {
                        displayValue += ' ';
                    }
                }
                cardDisplay.textContent = displayValue;
            } else {
                cardDisplay.textContent = '•••• •••• •••• ••••';
            }
            
            // Detect card brand and update styling
            updateCardBrand(value);
            
            // Validate card number with delay to avoid jQuery validation conflicts
            setTimeout(() => validateCardNumber(), 150);
        });

        // Format expiration date and update widget
        document.querySelector('[name="ExpirationDate"]').addEventListener('input', function(e) {
            let value = e.target.value.replace(/\D/g, '');
            if (value.length >= 2) {
                value = value.substring(0,2) + '/' + value.substring(2,4);
            }
            e.target.value = value;
            
            // Update expiry display - only show user input
            if (value.length > 0) {
                expiryDisplay.textContent = value;
            } else {
                expiryDisplay.textContent = 'MM/YY';
            }
            
            // Validate expiration date with delay
            setTimeout(() => validateExpirationDate(), 150);
        });

        // Update name on card - only show user input
        document.querySelector('[name="NameOnCard"]').addEventListener('input', function(e) {
            const name = e.target.value.trim().toUpperCase();
            if (name.length > 0) {
                nameDisplay.textContent = name;
            } else {
                nameDisplay.textContent = 'YOUR NAME HERE';
            }
            
            // Validate name on card with delay
            setTimeout(() => validateNameOnCard(), 150);
        });

        // Update CVC - only show user input
        document.querySelector('[name="CVV"]').addEventListener('input', function(e) {
            const cvc = e.target.value.trim();
            if (cvc.length > 0) {
                cvcDisplay.textContent = cvc;
            } else {
                cvcDisplay.textContent = '•••';
            }
            
            // Validate CVV with delay
            setTimeout(() => validateCVV(), 150);
        });

        // Card brand detection and styling
        function updateCardBrand(cardNumber) {
            const firstDigit = cardNumber.charAt(0);
            const firstTwoDigits = cardNumber.substring(0, 2);
            const firstFourDigits = cardNumber.substring(0, 4);

            // Reset classes
            cardBackground.className = 'card-background';

            if (cardNumber.length === 0) {
                cardBrand.textContent = '';
                cardBackground.classList.add('default-card');
                return;
            }

            if (cardNumber.startsWith('4')) {
                cardBrand.textContent = 'VISA';
                cardBackground.classList.add('visa-card');
            } else if (firstTwoDigits >= '51' && firstTwoDigits <= '55') {
                cardBrand.textContent = 'MASTERCARD';
                cardBackground.classList.add('mastercard-card');
            } else if (cardNumber.startsWith('34') || cardNumber.startsWith('37')) {
                cardBrand.textContent = 'AMEX';
                cardBackground.classList.add('amex-card');
            } else if (cardNumber.startsWith('6011') || firstTwoDigits === '65') {
                cardBrand.textContent = 'DISCOVER';
                cardBackground.classList.add('discover-card');
            } else {
                cardBrand.textContent = '';
                cardBackground.classList.add('default-card');
            }
        }

        // Toggle payment method details
        document.querySelectorAll('input[name="PaymentMethod"]').forEach(radio => {
            radio.addEventListener('change', function() {
                document.querySelectorAll('.method-option').forEach(opt => opt.classList.remove('active'));
                this.nextElementSibling.classList.add('active');
                
                const cardDetails = document.getElementById('card-details');
                if (this.value === 'card') {
                    cardDetails.style.display = 'block';
                } else {
                    cardDetails.style.display = 'none';
                }
            });
        });

        // Amount suggestion buttons
        document.querySelectorAll('.amount-btn').forEach(button => {
            button.addEventListener('click', function() {
                const amount = this.getAttribute('data-amount');
                const amountInput = document.querySelector('[name="Amount"]');
                amountInput.value = amount;
                
                // Remove active class from all buttons
                document.querySelectorAll('.amount-btn').forEach(btn => btn.classList.remove('active'));
                // Add active class to clicked button
                this.classList.add('active');
                
                // Validate amount field after setting value
                validateAmount();
            });
        });

        // Validation functions
        function validateAmount() {
            const amountInput = document.querySelector('[name="Amount"]');
            const amountError = amountInput.parentElement.querySelector('.text-danger');
            const value = parseFloat(amountInput.value);
            
            if (!amountInput.value || value <= 0) {
                if (amountError) amountError.style.display = 'block';
            } else {
                if (amountError) amountError.style.display = 'none';
            }
        }

        function validateNameOnCard() {
            const nameInput = document.querySelector('[name="NameOnCard"]');
            const nameError = nameInput.parentElement.querySelector('.text-danger');
            
            if (!nameInput.value.trim()) {
                if (nameError) nameError.style.display = 'block';
            } else {
                if (nameError) nameError.style.display = 'none';
            }
        }

        function validateCardNumber() {
            const cardInput = document.querySelector('[name="CardNumber"]');
            const cardError = cardInput.parentElement.querySelector('.text-danger');
            const value = cardInput.value.replace(/\s/g, '');
            
            if (!value || value.length < 13) {
                if (cardError) cardError.style.display = 'block';
            } else {
                if (cardError) cardError.style.display = 'none';
            }
        }

        function validateExpirationDate() {
            const expiryInput = document.querySelector('[name="ExpirationDate"]');
            const expiryError = expiryInput.parentElement.querySelector('.text-danger');
            const value = expiryInput.value;
            
            if (!value || value.length < 5) {
                if (expiryError) expiryError.style.display = 'block';
            } else {
                if (expiryError) expiryError.style.display = 'none';
            }
        }

        function validateCVV() {
            const cvvInput = document.querySelector('[name="CVV"]');
            const cvvError = cvvInput.parentElement.querySelector('.text-danger');
            const value = cvvInput.value;
            
            if (!value || value.length < 3) {
                if (cvvError) cvvError.style.display = 'block';
            } else {
                if (cvvError) cvvError.style.display = 'none';
            }
        }

        // Initialize validation on page load
        function initializeValidation() {
            // Hide all validation messages initially
            document.querySelectorAll('.text-danger').forEach(error => {
                if (error) error.style.display = 'none';
            });

            // Add event listeners for real-time validation with debouncing
            const amountInput = document.querySelector('[name="Amount"]');
            const nameInput = document.querySelector('[name="NameOnCard"]');
            const cardInput = document.querySelector('[name="CardNumber"]');
            const expiryInput = document.querySelector('[name="ExpirationDate"]');
            const cvvInput = document.querySelector('[name="CVV"]');

            // Use setTimeout to prevent conflicts with jQuery validation
            if (amountInput) {
                amountInput.addEventListener('input', () => setTimeout(validateAmount, 100));
                amountInput.addEventListener('blur', () => setTimeout(validateAmount, 100));
            }
            if (nameInput) {
                nameInput.addEventListener('input', () => setTimeout(validateNameOnCard, 100));
                nameInput.addEventListener('blur', () => setTimeout(validateNameOnCard, 100));
            }
            if (cardInput) {
                cardInput.addEventListener('input', () => setTimeout(validateCardNumber, 100));
                cardInput.addEventListener('blur', () => setTimeout(validateCardNumber, 100));
            }
            if (expiryInput) {
                expiryInput.addEventListener('input', () => setTimeout(validateExpirationDate, 100));
                expiryInput.addEventListener('blur', () => setTimeout(validateExpirationDate, 100));
            }
            if (cvvInput) {
                cvvInput.addEventListener('input', () => setTimeout(validateCVV, 100));
                cvvInput.addEventListener('blur', () => setTimeout(validateCVV, 100));
            }
        }

        // Wait for DOM to be fully loaded
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', initializeValidation);
        } else {
            initializeValidation();
        }

        // Form submission handler for loading overlay
        document.querySelector('.payment-form').addEventListener('submit', function(e) {
            // Check if form is valid before showing loading overlay
            const form = e.target;
            const isValid = form.checkValidity();
            
            if (isValid) {
                // Show loading overlay
                const loadingOverlay = document.getElementById('loading-overlay');
                if (loadingOverlay) {
                    loadingOverlay.style.display = 'flex';
                }
                
                // Disable submit button to prevent double submission
                const submitBtn = form.querySelector('.deposit-btn');
                if (submitBtn) {
                    submitBtn.disabled = true;
                    submitBtn.textContent = 'PROCESSING...';
                }
            }
        });
    </script>
}
