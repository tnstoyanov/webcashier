@model WebCashier.Models.PaymentModel

@{
    ViewData["Title"] = "Top Up Your Account";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="payment-container">
    <div class="payment-header">
        <div class="logo-container">
            <img class="logo" src="https://xcite.platform.thexcite.com/resources/svg/trading_logo.svg" alt="zenstox logo" />
            <a href="/" class="back-link">Back to platform</a>
        </div>
    </div>

    <div class="payment-content">
        <h1 class="payment-title">TOP UP YOUR ACCOUNT</h1>
        <p class="security-text">All payments are 100% secure</p>

        <div class="payment-layout">
            <form asp-action="ProcessPayment" method="post" class="payment-form">
                @Html.AntiForgeryToken()
                
                <div class="payment-methods">
                    <p class="method-label">Choose a payment method:</p>
                    <div class="carousel-container">
                        <button type="button" class="carousel-arrow carousel-prev" onclick="moveCarousel(-1)">
                            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <path d="M15 18L9 12L15 6" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                            </svg>
                        </button>
                        
                        <div class="method-carousel">
                            <div class="carousel-track">
                                <div class="carousel-item">
                                    <input type="radio" id="card" name="PaymentMethod" value="card" checked />
                                    <label for="card" class="method-option active">
                                        <div class="card-icon">
                                            <svg width="52" height="35" viewBox="0 0 52 35" fill="none" xmlns="http://www.w3.org/2000/svg">
                                                <rect width="52" height="35" rx="4" fill="#4F46E5"/>
                                                <rect x="4" y="7" width="44" height="4" fill="#E5E7EB"/>
                                                <rect x="4" y="16" width="14" height="2" fill="#D1D5DB"/>
                                                <rect x="4" y="20" width="10" height="2" fill="#D1D5DB"/>
                                                <circle cx="42" cy="25" r="4" fill="#10B981"/>
                                                <circle cx="38" cy="25" r="4" fill="#F59E0B"/>
                                            </svg>
                                        </div>
                                        <span class="payment-brand">Praxis CC 1.3</span>
                                    </label>
                                </div>

                                <div class="carousel-item">
                                    <input type="radio" id="paypal" name="PaymentMethod" value="paypal" />
                                    <label for="paypal" class="method-option">
                                        <div class="paypal-icon">
                                            <img src="https://www.paypalobjects.com/marketing/web/logos/paypal-mark-color.svg" alt="PayPal" width="52" height="35" />
                                        </div>
                                        <span class="payment-brand">PayPal</span>
                                    </label>
                                </div>

                                <div class="carousel-item">
                                    <input type="radio" id="safetypay" name="PaymentMethod" value="safetypay" />
                                    <label for="safetypay" class="method-option">
                                        <div class="finshark-icon">
                                            <svg xmlns="http://www.w3.org/2000/svg" width="52" height="11" viewBox="0 0 300 65.156">
                                              <g id="Logo" transform="translate(-161.42 106.5)">
                                                <path id="Tracciato_19910" data-name="Tracciato 19910" d="M424.871-70.183,435.64-55.45H425.323L416.26-68.884v-1.971l9-12.465h9.811Z" transform="translate(25.779 2.345)" fill="#011025"></path>
                                                <path id="Tracciato_19911" data-name="Tracciato 19911" d="M417.066-67.619v13.434H408.29V-95.82h8.776v28.2Z" transform="translate(24.973 1.08)" fill="#011025"></path>
                                                <path id="Tracciato_19912" data-name="Tracciato 19912" d="M408.233-81.373q-2.61,3.287-5.219,6.6a3.692,3.692,0,0,0-1.432-.98,5.169,5.169,0,0,0-1.949-.341,4.6,4.6,0,0,0-3.469,1.343,5.655,5.655,0,0,0-1.288,4.041V-55.4H386.1v-27.87h8.776v2.114a9.449,9.449,0,0,1,7.169-2.687,9.644,9.644,0,0,1,3.524.595A7.08,7.08,0,0,1,408.233-81.373Z" transform="translate(22.729 2.292)" fill="#011025"></path>
                                                <path id="Tracciato_19913" data-name="Tracciato 19913" d="M384.214-83.267V-55.4h-8.6v-2.257a9.786,9.786,0,0,1-2.588,1.74,11.69,11.69,0,0,1-5.1,1.09,12.6,12.6,0,0,1-6.86-1.894,13.507,13.507,0,0,1-4.757-5.153,15.571,15.571,0,0,1-1.751-7.466,15.558,15.558,0,0,1,1.751-7.455,13.428,13.428,0,0,1,4.757-5.153,12.6,12.6,0,0,1,6.86-1.894A11.558,11.558,0,0,1,373-82.75a9.955,9.955,0,0,1,2.61,1.784v-2.3Zm-8.259,13.93a7.315,7.315,0,0,0-.771-3.436A5.693,5.693,0,0,0,373-75.1a6.271,6.271,0,0,0-3.237-.837,6.283,6.283,0,0,0-3.248.837,6.051,6.051,0,0,0-2.235,2.323,6.957,6.957,0,0,0-.826,3.436,7.016,7.016,0,0,0,.8,3.392A5.949,5.949,0,0,0,366.5-63.6a6.1,6.1,0,0,0,3.2.859,5.879,5.879,0,0,0,4.537-1.861A6.714,6.714,0,0,0,375.956-69.338Z" transform="translate(19.537 2.292)" fill="#011025"></path>
                                                <path id="Tracciato_19914" data-name="Tracciato 19914" d="M353.518-72.024v17.839h-8.776v-15.89A4.791,4.791,0,0,0,343.4-73.6a4.613,4.613,0,0,0-3.414-1.343,5.173,5.173,0,0,0-2.522.595,4.4,4.4,0,0,0-1.718,1.729,4.988,4.988,0,0,0-.639,2.544v15.89H326.33V-95.82h8.776V-80a9.992,9.992,0,0,1,1.839-1.288,11.711,11.711,0,0,1,5.682-1.343,11.826,11.826,0,0,1,5.726,1.343,9.591,9.591,0,0,1,3.821,3.733A11.078,11.078,0,0,1,353.518-72.024Z" transform="translate(16.682 1.08)" fill="#011025"></path>
                                                <path id="Tracciato_19915" data-name="Tracciato 19915" d="M324.8-79.172q-2.494,2.511-4.988,5.043a7.339,7.339,0,0,0-2.951-2.18,8.882,8.882,0,0,0-3.182-.628,4.56,4.56,0,0,0-2.235.429,1.335,1.335,0,0,0-.749,1.233,1.538,1.538,0,0,0,.969,1.376,11.819,11.819,0,0,0,2.533.914c1.024.264,2.114.595,3.259.98a14.327,14.327,0,0,1,3.27,1.542,7.768,7.768,0,0,1,2.533,2.61,8.293,8.293,0,0,1,.969,4.272,7.813,7.813,0,0,1-3.072,6.486q-3.056,2.412-8.281,2.412a18.942,18.942,0,0,1-4.845-.639,17.974,17.974,0,0,1-4.416-1.806,14.229,14.229,0,0,1-3.469-2.72l4.988-5.054a9.483,9.483,0,0,0,3.27,2.323,9.994,9.994,0,0,0,4.129.837,5.007,5.007,0,0,0,2.378-.462,1.4,1.4,0,0,0,.826-1.255,1.714,1.714,0,0,0-1-1.586,12.33,12.33,0,0,0-2.555-.969c-1.024-.286-2.114-.606-3.27-.947a14.587,14.587,0,0,1-3.259-1.432,7.218,7.218,0,0,1-2.533-2.555,8.032,8.032,0,0,1-.969-4.162,8,8,0,0,1,1.376-4.669,9.205,9.205,0,0,1,3.9-3.127,14.252,14.252,0,0,1,5.9-1.145,17.087,17.087,0,0,1,6.574,1.233A11.772,11.772,0,0,1,324.8-79.172Z" transform="translate(14.033 2.271)" fill="#011025"></path>
                                                <path id="Tracciato_19916" data-name="Tracciato 19916" d="M299.878-73.236V-55.4H291.1v-15.89a4.755,4.755,0,0,0-1.354-3.524,4.6,4.6,0,0,0-3.414-1.343,5.2,5.2,0,0,0-2.522.595,4.4,4.4,0,0,0-1.718,1.729,5.1,5.1,0,0,0-.628,2.544V-55.4H272.69v-27.87h8.776v2.18A9.993,9.993,0,0,1,283.5-82.5a12.206,12.206,0,0,1,5.759-1.343,10.2,10.2,0,0,1,5.473,1.465A10.736,10.736,0,0,1,298.5-78.51,10.5,10.5,0,0,1,299.878-73.236Z" transform="translate(11.256 2.292)" fill="#011025"></path>
                                                <path id="Tracciato_19917" data-name="Tracciato 19917" d="M268.886-83.32v27.87H260.11V-83.32h8.776Z" transform="translate(9.982 2.345)" fill="#011025"></path>
                                                <path id="Tracciato_19918" data-name="Tracciato 19918" d="M267.806-92.209a4.565,4.565,0,0,1,1.255,3.27,4.655,4.655,0,0,1-1.255,3.292,4.261,4.261,0,0,1-3.27,1.343,4.271,4.271,0,0,1-3.237-1.343,4.589,4.589,0,0,1-1.288-3.292,4.5,4.5,0,0,1,1.288-3.27,4.333,4.333,0,0,1,3.237-1.321A4.322,4.322,0,0,1,267.806-92.209Z" transform="translate(9.973 1.313)" fill="#011025"></path>
                                                <path id="Tracciato_19919" data-name="Tracciato 19919" d="M262.375-94.22c-1.453,2.147-2.907,4.284-4.35,6.431a3.877,3.877,0,0,0-1.123-.573,3.72,3.72,0,0,0-1.178-.176,2.751,2.751,0,0,0-2.18.837,3.242,3.242,0,0,0-.738,2.257V-82h5.219v7.455h-5.219v20.416H244.03V-74.542H238.81V-82h5.219v-2.984a11.7,11.7,0,0,1,1.432-5.792,10.693,10.693,0,0,1,4.041-4.1,12.039,12.039,0,0,1,6.222-1.531,11.657,11.657,0,0,1,3.557.518A10.47,10.47,0,0,1,262.375-94.22Z" transform="translate(7.828 1.021)" fill="#011025"></path>
                                                <path id="Tracciato_19920" data-name="Tracciato 19920" d="M225.827-55.237a64.532,64.532,0,0,1,.738,9.778,62.178,62.178,0,0,1-32.572-8.732,62.205,62.205,0,0,1-32.572,8.732,64.532,64.532,0,0,1,.738-9.778A55.394,55.394,0,0,0,193.992-65.83,55.367,55.367,0,0,0,225.827-55.237Z" transform="translate(0 4.114)" fill="#011025"></path>
                                                <path id="Tracciato_19921" data-name="Tracciato 19921" d="M226.374-106.5a62.15,62.15,0,0,1-8.732,32.572,64.433,64.433,0,0,1,6.651,16.242A48.15,48.15,0,0,1,213.6-59.337a54.66,54.66,0,0,0-7.6-14.59,53.508,53.508,0,0,0,9.525-21.726A55.364,55.364,0,0,0,174-59.337a48.148,48.148,0,0,1-10.7,1.652A65.16,65.16,0,0,1,226.374-106.5Z" transform="translate(0.189)" fill="#011025"></path>
                                              </g>
                                            </svg>
                                        </div>
                                        <span class="payment-brand">Finshark</span>
                                    </label>
                                </div>

                                <div class="carousel-item">
                                    <input type="radio" id="skrill" name="PaymentMethod" value="skrill" />
                                    <label for="skrill" class="method-option">
                                        <span class="payment-brand">Skrill</span>
                                    </label>
                                </div>

                                <div class="carousel-item">
                                    <input type="radio" id="zmg" name="PaymentMethod" value="zmg" />
                                    <label for="zmg" class="method-option">
                                        <span class="payment-brand">ZMG</span>
                                    </label>
                                </div>

                                <div class="carousel-item">
                                    <input type="radio" id="gpay" name="PaymentMethod" value="gpay" />
                                    <label for="gpay" class="method-option">
                                        <span class="payment-brand">G Pay</span>
                                    </label>
                                </div>
                            </div>
                        </div>
                        
                        <button type="button" class="carousel-arrow carousel-next" onclick="moveCarousel(1)">
                            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <path d="M9 18L15 12L9 6" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                            </svg>
                        </button>
                    </div>
                </div>

                <div class="payment-forms">
                    <div id="card-details" class="card-details">
                        <div class="card-form-layout">
                            <div class="form-left">
                                <!-- Amount suggestion buttons -->
                                <div class="amount-suggestions">
                                    <button type="button" class="amount-btn" data-amount="50">€50</button>
                                    <button type="button" class="amount-btn" data-amount="100">€100</button>
                                    <button type="button" class="amount-btn" data-amount="200">€200</button>
                                </div>

                                <div class="form-row">
                                    <div class="form-group amount-group">
                                        <label asp-for="Amount">Amount</label>
                                        <input asp-for="Amount" type="number" step="0.01" class="form-control" placeholder="0" />
                                        <span asp-validation-for="Amount" class="text-danger"></span>
                                    </div>
                                    <div class="form-group currency-group">
                                        <label asp-for="Currency">Currency</label>
                                        <select asp-for="Currency" class="form-control">
                                            <option value="USD">USD</option>
                                            <option value="EUR">EUR</option>
                                            <option value="GBP">GBP</option>
                                        </select>
                                    </div>
                                </div>

                                <div class="form-group">
                                    <label asp-for="NameOnCard">Name on card</label>
                                    <input asp-for="NameOnCard" class="form-control" placeholder="Enter your name" />
                                    <span asp-validation-for="NameOnCard" class="text-danger"></span>
                                </div>

                                <div class="form-group">
                                    <label asp-for="CardNumber">Card number</label>
                                    <input asp-for="CardNumber" class="form-control" placeholder="•••• •••• •••• ••••" maxlength="19" />
                                    <span asp-validation-for="CardNumber" class="text-danger"></span>
                                </div>

                                <div class="form-row">
                                    <div class="form-group">
                                        <label asp-for="ExpirationDate">Expiration Date</label>
                                        <input asp-for="ExpirationDate" class="form-control" placeholder="MM/YY" maxlength="5" />
                                        <span asp-validation-for="ExpirationDate" class="text-danger"></span>
                                    </div>
                                    <div class="form-group">
                                        <label asp-for="CVV">CVV</label>
                                        <input asp-for="CVV" class="form-control" placeholder="123" maxlength="4" />
                                        <span asp-validation-for="CVV" class="text-danger"></span>
                                    </div>
                                </div>

                                <div class="form-group">
                                    <label asp-for="PromotionCode">Promotion code</label>
                                    <input asp-for="PromotionCode" class="form-control" placeholder="Enter code (optional)" />
                                </div>
                            </div>

                            <div class="form-right">
                                <div class="interactive-credit-card">
                                    <div class="card-container">
                                        <div class="card-background">
                                            <!-- Front content -->
                                            <div class="card-content card-front-content">
                                                <div class="card-chip"></div>
                                                <div class="card-number" id="card-display">•••• •••• •••• ••••</div>
                                                <div class="card-details">
                                                    <div class="card-holder">
                                                        <div class="card-label">CARDHOLDER NAME</div>
                                                        <div class="card-name" id="name-display">YOUR NAME HERE</div>
                                                    </div>
                                                    <div class="card-expiry-section">
                                                        <div class="card-label">EXPIRES</div>
                                                        <div class="card-expiry" id="expiry-display">MM/YY</div>
                                                    </div>
                                                </div>
                                                <div class="card-brand" id="card-brand"></div>
                                            </div>
                                            
                                            <!-- Back content -->
                                            <div class="card-content card-back-content">
                                                <div class="magnetic-stripe"></div>
                                                <div class="signature-panel">
                                                    <div class="cvv-section">
                                                        <div class="card-label">CVV</div>
                                                        <div class="card-cvv" id="cvv-display-back">•••</div>
                                                    </div>
                                                </div>
                                                <div class="card-brand-back" id="card-brand-back"></div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <p class="currency-note">Please note that you might be charged in a different currency</p>

                <button type="submit" class="deposit-btn">DEPOSIT</button>
            </form>
        </div>
    </div>
</div>

<!-- Loading Overlay -->
<div id="loading-overlay" class="loading-overlay" style="display: none;">
    <div class="loading-content">
        <div class="loading-spinner">
            <div class="spinner"></div>
        </div>
        <h3 class="loading-title">Transaction in progress</h3>
        <p class="loading-message">Please wait while we process your payment...</p>
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script>
        // Add missing jQuery Validate creditcard method
        if (typeof $.validator !== 'undefined') {
            $.validator.addMethod("creditcard", function(value, element) {
                // Remove spaces and non-numeric characters
                value = value.replace(/\s/g, '').replace(/[^0-9]/g, '');
                
                // Check if empty
                if (!value) return false;
                
                // Basic length check
                if (value.length < 13 || value.length > 19) return false;
                
                // Luhn algorithm for credit card validation
                var sum = 0;
                var shouldDouble = false;
                
                for (var i = value.length - 1; i >= 0; i--) {
                    var digit = parseInt(value.charAt(i));
                    
                    if (shouldDouble) {
                        digit *= 2;
                        if (digit > 9) digit -= 9;
                    }
                    
                    sum += digit;
                    shouldDouble = !shouldDouble;
                }
                
                return (sum % 10) === 0;
            }, "Please enter a valid credit card number");
        }

        // Card widget elements
        const cardDisplay = document.getElementById('card-display');
        const nameDisplay = document.getElementById('name-display');
        const expiryDisplay = document.getElementById('expiry-display');
        const cvvDisplayBack = document.getElementById('cvv-display-back');
        const cardBrandDisplay = document.getElementById('card-brand');
        const cardBrandBack = document.getElementById('card-brand-back');
        const cardContainer = document.querySelector('.card-container');
        const cardBackground = document.querySelector('.card-background');
        const cardFrontContent = document.querySelector('.card-front-content');
        const cardBackContent = document.querySelector('.card-back-content');

        // Format card number input and update widget
        document.querySelector('[name="CardNumber"]').addEventListener('input', function(e) {
            let value = e.target.value.replace(/\s/g, '').replace(/[^0-9]/gi, '');
            let formattedValue = value.match(/.{1,4}/g)?.join(' ') || value;
            e.target.value = formattedValue;
            
            // Update card display - only show user input
            if (value.length > 0) {
                // Create display value with proper spacing
                let displayValue = '';
                for (let i = 0; i < 16; i++) {
                    if (i < value.length) {
                        displayValue += value[i];
                    } else {
                        displayValue += '•';
                    }
                    // Add space after every 4 digits except the last group
                    if ((i + 1) % 4 === 0 && i < 15) {
                        displayValue += ' ';
                    }
                }
                cardDisplay.textContent = displayValue;
            } else {
                cardDisplay.textContent = '•••• •••• •••• ••••';
            }
            
            // Detect card brand and update styling
            updateCardBrand(value);
            
            // Validate card number with delay to avoid jQuery validation conflicts
            setTimeout(() => validateCardNumber(), 150);
        });

        // Flip back to front when focusing on card number
        document.querySelector('[name="CardNumber"]').addEventListener('focus', function(e) {
            console.log('Card number focused - flipping to front');
            if (cardContainer) {
                cardContainer.classList.remove('flipped');
                console.log('Removed flipped class');
            }
        });

        // Format expiration date and update widget
        document.querySelector('[name="ExpirationDate"]').addEventListener('input', function(e) {
            let value = e.target.value.replace(/\D/g, '');
            if (value.length >= 2) {
                value = value.substring(0,2) + '/' + value.substring(2,4);
            }
            e.target.value = value;
            
            // Update expiry display - only show user input
            if (value.length > 0) {
                expiryDisplay.textContent = value;
            } else {
                expiryDisplay.textContent = 'MM/YY';
            }
            
            // Validate expiration date with delay
            setTimeout(() => validateExpirationDate(), 150);
        });

        // Flip back to front when focusing on expiration date
        document.querySelector('[name="ExpirationDate"]').addEventListener('focus', function(e) {
            if (cardContainer) {
                cardContainer.classList.remove('flipped');
            }
        });

        // Update name on card - only show user input
        document.querySelector('[name="NameOnCard"]').addEventListener('input', function(e) {
            const name = e.target.value.trim().toUpperCase();
            if (name.length > 0) {
                nameDisplay.textContent = name;
            } else {
                nameDisplay.textContent = 'YOUR NAME HERE';
            }
            
            // Validate name on card with delay
            setTimeout(() => validateNameOnCard(), 150);
        });

        // Flip back to front when focusing on name
        document.querySelector('[name="NameOnCard"]').addEventListener('focus', function(e) {
            if (cardContainer) {
                cardContainer.classList.remove('flipped');
            }
        });

        // Update CVV - only show user input and handle card flipping
        document.querySelector('[name="CVV"]').addEventListener('focus', function(e) {
            // Flip card to back side with 3D animation
            console.log('CVV focused - flipping to back');
            if (cardContainer) {
                cardContainer.classList.add('flipped');
                console.log('Added flipped class');
            } else {
                console.log('cardContainer not found');
            }
        });

        document.querySelector('[name="CVV"]').addEventListener('blur', function(e) {
            // Don't auto-flip back on blur - let user decide by clicking other inputs
            console.log('CVV blurred');
        });

        document.querySelector('[name="CVV"]').addEventListener('input', function(e) {
            const cvv = e.target.value.trim();
            if (cvv.length > 0) {
                cvvDisplayBack.textContent = cvv;
            } else {
                cvvDisplayBack.textContent = '•••';
            }
            
            // Validate CVV with delay
            setTimeout(() => validateCVV(), 150);
        });

        // Card brand detection and styling
        function updateCardBrand(cardNumber) {
            const firstDigit = cardNumber.charAt(0);
            const firstTwoDigits = cardNumber.substring(0, 2);
            const firstFourDigits = cardNumber.substring(0, 4);

            // Reset classes on card background
            if (cardBackground) {
                cardBackground.className = 'card-background';
            }

            if (cardNumber.length === 0) {
                if (cardBrandDisplay) cardBrandDisplay.textContent = '';
                if (cardBrandBack) cardBrandBack.textContent = '';
                if (cardBackground) cardBackground.classList.add('default-card');
                return;
            }

            let brandName = '';
            if (cardNumber.startsWith('4')) {
                brandName = 'VISA';
                if (cardBackground) cardBackground.classList.add('visa-card');
            } else if (isMastercard(cardNumber)) {
                brandName = 'MASTERCARD';
                if (cardBackground) cardBackground.classList.add('mastercard-card');
            } else if (cardNumber.startsWith('34') || cardNumber.startsWith('37')) {
                brandName = 'AMEX';
                if (cardBackground) cardBackground.classList.add('amex-card');
            } else if (cardNumber.startsWith('6011') || firstTwoDigits === '65') {
                brandName = 'DISCOVER';
                if (cardBackground) cardBackground.classList.add('discover-card');
            } else {
                brandName = '';
                if (cardBackground) cardBackground.classList.add('default-card');
            }
            
            // Update both front and back brand displays
            if (cardBrandDisplay) cardBrandDisplay.textContent = brandName;
            if (cardBrandBack) cardBrandBack.textContent = brandName;
        }

        // Enhanced Mastercard detection function
        function isMastercard(cardNumber) {
            const firstTwoDigits = parseInt(cardNumber.substring(0, 2));
            const firstFourDigits = parseInt(cardNumber.substring(0, 4));
            
            // Original Mastercard range: 51-55
            if (firstTwoDigits >= 51 && firstTwoDigits <= 55) {
                return true;
            }
            
            // New Mastercard 2-series range: 2221-2720
            if (firstFourDigits >= 2221 && firstFourDigits <= 2720) {
                return true;
            }
            
            return false;
        }

        // Toggle payment method details
        document.querySelectorAll('input[name="PaymentMethod"]').forEach(radio => {
            radio.addEventListener('change', function() {
                document.querySelectorAll('.method-option').forEach(opt => opt.classList.remove('active'));
                this.nextElementSibling.classList.add('active');
                
                const cardDetails = document.getElementById('card-details');
                if (this.value === 'card') {
                    cardDetails.style.display = 'block';
                } else {
                    cardDetails.style.display = 'none';
                }
            });
        });

        // Amount suggestion buttons
        document.querySelectorAll('.amount-btn').forEach(button => {
            button.addEventListener('click', function() {
                const amount = this.getAttribute('data-amount');
                const amountInput = document.querySelector('[name="Amount"]');
                amountInput.value = amount;
                
                // Remove active class from all buttons
                document.querySelectorAll('.amount-btn').forEach(btn => btn.classList.remove('active'));
                // Add active class to clicked button
                this.classList.add('active');
                
                // Validate amount field after setting value
                validateAmount();
            });
        });

        // Flip back to front when focusing on amount input
        document.querySelector('[name="Amount"]').addEventListener('focus', function(e) {
            if (cardContainer) {
                cardContainer.classList.remove('flipped');
            }
        });

        // Validation functions
        function validateAmount() {
            const amountInput = document.querySelector('[name="Amount"]');
            const amountError = amountInput.parentElement.querySelector('.text-danger');
            const value = parseFloat(amountInput.value);
            
            if (!amountInput.value || value <= 0) {
                if (amountError) amountError.style.display = 'block';
            } else {
                if (amountError) amountError.style.display = 'none';
            }
        }

        function validateNameOnCard() {
            const nameInput = document.querySelector('[name="NameOnCard"]');
            const nameError = nameInput.parentElement.querySelector('.text-danger');
            
            if (!nameInput.value.trim()) {
                if (nameError) nameError.style.display = 'block';
            } else {
                if (nameError) nameError.style.display = 'none';
            }
        }

        function validateCardNumber() {
            const cardInput = document.querySelector('[name="CardNumber"]');
            const cardError = cardInput.parentElement.querySelector('.text-danger');
            const value = cardInput.value.replace(/\s/g, '');
            
            if (!value || value.length < 13) {
                if (cardError) cardError.style.display = 'block';
            } else {
                if (cardError) cardError.style.display = 'none';
            }
        }

        function validateExpirationDate() {
            const expiryInput = document.querySelector('[name="ExpirationDate"]');
            const expiryError = expiryInput.parentElement.querySelector('.text-danger');
            const value = expiryInput.value;
            
            if (!value || value.length < 5) {
                if (expiryError) expiryError.style.display = 'block';
            } else {
                if (expiryError) expiryError.style.display = 'none';
            }
        }

        function validateCVV() {
            const cvvInput = document.querySelector('[name="CVV"]');
            const cvvError = cvvInput.parentElement.querySelector('.text-danger');
            const value = cvvInput.value;
            
            if (!value || value.length < 3) {
                if (cvvError) cvvError.style.display = 'block';
            } else {
                if (cvvError) cvvError.style.display = 'none';
            }
        }

        // Initialize validation on page load
        function initializeValidation() {
            // Hide all validation messages initially
            document.querySelectorAll('.text-danger').forEach(error => {
                if (error) error.style.display = 'none';
            });

            // Add event listeners for real-time validation with debouncing
            const amountInput = document.querySelector('[name="Amount"]');
            const nameInput = document.querySelector('[name="NameOnCard"]');
            const cardInput = document.querySelector('[name="CardNumber"]');
            const expiryInput = document.querySelector('[name="ExpirationDate"]');
            const cvvInput = document.querySelector('[name="CVV"]');

            // Use setTimeout to prevent conflicts with jQuery validation
            if (amountInput) {
                amountInput.addEventListener('input', () => setTimeout(validateAmount, 100));
                amountInput.addEventListener('blur', () => setTimeout(validateAmount, 100));
            }
            if (nameInput) {
                nameInput.addEventListener('input', () => setTimeout(validateNameOnCard, 100));
                nameInput.addEventListener('blur', () => setTimeout(validateNameOnCard, 100));
            }
            if (cardInput) {
                cardInput.addEventListener('input', () => setTimeout(validateCardNumber, 100));
                cardInput.addEventListener('blur', () => setTimeout(validateCardNumber, 100));
            }
            if (expiryInput) {
                expiryInput.addEventListener('input', () => setTimeout(validateExpirationDate, 100));
                expiryInput.addEventListener('blur', () => setTimeout(validateExpirationDate, 100));
            }
            if (cvvInput) {
                cvvInput.addEventListener('input', () => setTimeout(validateCVV, 100));
                cvvInput.addEventListener('blur', () => setTimeout(validateCVV, 100));
            }
        }

        // Wait for DOM to be fully loaded
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', initializeValidation);
        } else {
            initializeValidation();
        }

        // Form submission handler for loading overlay
        document.querySelector('.payment-form').addEventListener('submit', function(e) {
            // Check if form is valid before showing loading overlay
            const form = e.target;
            const isValid = form.checkValidity();
            
            if (isValid) {
                // Show loading overlay
                const loadingOverlay = document.getElementById('loading-overlay');
                if (loadingOverlay) {
                    loadingOverlay.style.display = 'flex';
                }
                
                // Disable submit button to prevent double submission
                const submitBtn = form.querySelector('.deposit-btn');
                if (submitBtn) {
                    submitBtn.disabled = true;
                    submitBtn.textContent = 'PROCESSING...';
                }
            }
        });
    </script>
}
